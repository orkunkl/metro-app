// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: x/metro/codec.proto

package metro

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_iov_one_weave "github.com/iov-one/weave"
	weave "github.com/iov-one/weave"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Station struct {
	Metadata     *weave.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	PrimaryKey   []byte          `protobuf:"bytes,2,opt,name=pk,proto3" json:"pk,omitempty"`
	Station      string          `protobuf:"bytes,3,opt,name=station,proto3" json:"station,omitempty"`
	Escalator    int64           `protobuf:"varint,4,opt,name=escalator,proto3" json:"escalator,omitempty"`
	Elevator     int64           `protobuf:"varint,5,opt,name=elevator,proto3" json:"elevator,omitempty"`
	IsPeronAda   bool            `protobuf:"varint,6,opt,name=is_peron_ada,json=isPeronAda,proto3" json:"is_peron_ada,omitempty"`
	TicketOffice int64           `protobuf:"varint,7,opt,name=ticket_office,json=ticketOffice,proto3" json:"ticket_office,omitempty"`
	TollGateEnt  int64           `protobuf:"varint,8,opt,name=toll_gate_ent,json=tollGateEnt,proto3" json:"toll_gate_ent,omitempty"`
	TollGateEx   int64           `protobuf:"varint,9,opt,name=toll_gate_ex,json=tollGateEx,proto3" json:"toll_gate_ex,omitempty"`
	EntranceExit int64           `protobuf:"varint,10,opt,name=entrance_exit,json=entranceExit,proto3" json:"entrance_exit,omitempty"`
}

func (m *Station) Reset()         { *m = Station{} }
func (m *Station) String() string { return proto.CompactTextString(m) }
func (*Station) ProtoMessage()    {}
func (*Station) Descriptor() ([]byte, []int) {
	return fileDescriptor_966ccfa1a9e1c00b, []int{0}
}
func (m *Station) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Station) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Station.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Station) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Station.Merge(m, src)
}
func (m *Station) XXX_Size() int {
	return m.Size()
}
func (m *Station) XXX_DiscardUnknown() {
	xxx_messageInfo_Station.DiscardUnknown(m)
}

var xxx_messageInfo_Station proto.InternalMessageInfo

func (m *Station) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Station) GetPrimaryKey() []byte {
	if m != nil {
		return m.PrimaryKey
	}
	return nil
}

func (m *Station) GetStation() string {
	if m != nil {
		return m.Station
	}
	return ""
}

func (m *Station) GetEscalator() int64 {
	if m != nil {
		return m.Escalator
	}
	return 0
}

func (m *Station) GetElevator() int64 {
	if m != nil {
		return m.Elevator
	}
	return 0
}

func (m *Station) GetIsPeronAda() bool {
	if m != nil {
		return m.IsPeronAda
	}
	return false
}

func (m *Station) GetTicketOffice() int64 {
	if m != nil {
		return m.TicketOffice
	}
	return 0
}

func (m *Station) GetTollGateEnt() int64 {
	if m != nil {
		return m.TollGateEnt
	}
	return 0
}

func (m *Station) GetTollGateEx() int64 {
	if m != nil {
		return m.TollGateEx
	}
	return 0
}

func (m *Station) GetEntranceExit() int64 {
	if m != nil {
		return m.EntranceExit
	}
	return 0
}

type Train struct {
	Metadata   *weave.Metadata                  `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	PrimaryKey []byte                           `protobuf:"bytes,2,opt,name=pk,proto3" json:"pk,omitempty"`
	Address    github_com_iov_one_weave.Address `protobuf:"bytes,3,opt,name=address,proto3,casttype=github.com/iov-one/weave.Address" json:"address,omitempty"`
}

func (m *Train) Reset()         { *m = Train{} }
func (m *Train) String() string { return proto.CompactTextString(m) }
func (*Train) ProtoMessage()    {}
func (*Train) Descriptor() ([]byte, []int) {
	return fileDescriptor_966ccfa1a9e1c00b, []int{1}
}
func (m *Train) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Train) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Train.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Train) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Train.Merge(m, src)
}
func (m *Train) XXX_Size() int {
	return m.Size()
}
func (m *Train) XXX_DiscardUnknown() {
	xxx_messageInfo_Train.DiscardUnknown(m)
}

var xxx_messageInfo_Train proto.InternalMessageInfo

func (m *Train) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Train) GetPrimaryKey() []byte {
	if m != nil {
		return m.PrimaryKey
	}
	return nil
}

func (m *Train) GetAddress() github_com_iov_one_weave.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

type Passenger struct {
	Metadata     *weave.Metadata                   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	PrimaryKey   []byte                            `protobuf:"bytes,2,opt,name=pk,proto3" json:"pk,omitempty"`
	Address      github_com_iov_one_weave.Address  `protobuf:"bytes,3,opt,name=address,proto3,casttype=github.com/iov-one/weave.Address" json:"address,omitempty"`
	RegisteredAt github_com_iov_one_weave.UnixTime `protobuf:"varint,4,opt,name=registered_at,json=registeredAt,proto3,casttype=github.com/iov-one/weave.UnixTime" json:"registered_at,omitempty"`
	Name         string                            `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *Passenger) Reset()         { *m = Passenger{} }
func (m *Passenger) String() string { return proto.CompactTextString(m) }
func (*Passenger) ProtoMessage()    {}
func (*Passenger) Descriptor() ([]byte, []int) {
	return fileDescriptor_966ccfa1a9e1c00b, []int{2}
}
func (m *Passenger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Passenger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Passenger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Passenger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Passenger.Merge(m, src)
}
func (m *Passenger) XXX_Size() int {
	return m.Size()
}
func (m *Passenger) XXX_DiscardUnknown() {
	xxx_messageInfo_Passenger.DiscardUnknown(m)
}

var xxx_messageInfo_Passenger proto.InternalMessageInfo

func (m *Passenger) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *Passenger) GetPrimaryKey() []byte {
	if m != nil {
		return m.PrimaryKey
	}
	return nil
}

func (m *Passenger) GetAddress() github_com_iov_one_weave.Address {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Passenger) GetRegisteredAt() github_com_iov_one_weave.UnixTime {
	if m != nil {
		return m.RegisteredAt
	}
	return 0
}

func (m *Passenger) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TrainArriveStationEvent struct {
	Metadata   *weave.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	PrimaryKey []byte          `protobuf:"bytes,2,opt,name=pk,proto3" json:"pk,omitempty"`
	// pk of station
	StationKey []byte `protobuf:"bytes,3,opt,name=station_key,json=stationKey,proto3" json:"station_key,omitempty"`
	// pk of train
	TrainKey  []byte                            `protobuf:"bytes,4,opt,name=train_key,json=trainKey,proto3" json:"train_key,omitempty"`
	ArrivedAt github_com_iov_one_weave.UnixTime `protobuf:"varint,5,opt,name=arrived_at,json=arrivedAt,proto3,casttype=github.com/iov-one/weave.UnixTime" json:"arrived_at,omitempty"`
}

func (m *TrainArriveStationEvent) Reset()         { *m = TrainArriveStationEvent{} }
func (m *TrainArriveStationEvent) String() string { return proto.CompactTextString(m) }
func (*TrainArriveStationEvent) ProtoMessage()    {}
func (*TrainArriveStationEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_966ccfa1a9e1c00b, []int{3}
}
func (m *TrainArriveStationEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrainArriveStationEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrainArriveStationEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrainArriveStationEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainArriveStationEvent.Merge(m, src)
}
func (m *TrainArriveStationEvent) XXX_Size() int {
	return m.Size()
}
func (m *TrainArriveStationEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainArriveStationEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TrainArriveStationEvent proto.InternalMessageInfo

func (m *TrainArriveStationEvent) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TrainArriveStationEvent) GetPrimaryKey() []byte {
	if m != nil {
		return m.PrimaryKey
	}
	return nil
}

func (m *TrainArriveStationEvent) GetStationKey() []byte {
	if m != nil {
		return m.StationKey
	}
	return nil
}

func (m *TrainArriveStationEvent) GetTrainKey() []byte {
	if m != nil {
		return m.TrainKey
	}
	return nil
}

func (m *TrainArriveStationEvent) GetArrivedAt() github_com_iov_one_weave.UnixTime {
	if m != nil {
		return m.ArrivedAt
	}
	return 0
}

type RegisterPassengerMsg struct {
	Metadata *weave.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Name     string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (m *RegisterPassengerMsg) Reset()         { *m = RegisterPassengerMsg{} }
func (m *RegisterPassengerMsg) String() string { return proto.CompactTextString(m) }
func (*RegisterPassengerMsg) ProtoMessage()    {}
func (*RegisterPassengerMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_966ccfa1a9e1c00b, []int{4}
}
func (m *RegisterPassengerMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterPassengerMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterPassengerMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterPassengerMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterPassengerMsg.Merge(m, src)
}
func (m *RegisterPassengerMsg) XXX_Size() int {
	return m.Size()
}
func (m *RegisterPassengerMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterPassengerMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterPassengerMsg proto.InternalMessageInfo

func (m *RegisterPassengerMsg) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *RegisterPassengerMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TrainArriveStationEventMsg struct {
	Metadata *weave.Metadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// id of station
	StationKey []byte `protobuf:"bytes,2,opt,name=station_key,json=stationKey,proto3" json:"station_key,omitempty"`
	TrainKey   []byte `protobuf:"bytes,3,opt,name=train_key,json=trainKey,proto3" json:"train_key,omitempty"`
}

func (m *TrainArriveStationEventMsg) Reset()         { *m = TrainArriveStationEventMsg{} }
func (m *TrainArriveStationEventMsg) String() string { return proto.CompactTextString(m) }
func (*TrainArriveStationEventMsg) ProtoMessage()    {}
func (*TrainArriveStationEventMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_966ccfa1a9e1c00b, []int{5}
}
func (m *TrainArriveStationEventMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrainArriveStationEventMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrainArriveStationEventMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrainArriveStationEventMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrainArriveStationEventMsg.Merge(m, src)
}
func (m *TrainArriveStationEventMsg) XXX_Size() int {
	return m.Size()
}
func (m *TrainArriveStationEventMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_TrainArriveStationEventMsg.DiscardUnknown(m)
}

var xxx_messageInfo_TrainArriveStationEventMsg proto.InternalMessageInfo

func (m *TrainArriveStationEventMsg) GetMetadata() *weave.Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *TrainArriveStationEventMsg) GetStationKey() []byte {
	if m != nil {
		return m.StationKey
	}
	return nil
}

func (m *TrainArriveStationEventMsg) GetTrainKey() []byte {
	if m != nil {
		return m.TrainKey
	}
	return nil
}

func init() {
	proto.RegisterType((*Station)(nil), "metro.Station")
	proto.RegisterType((*Train)(nil), "metro.Train")
	proto.RegisterType((*Passenger)(nil), "metro.Passenger")
	proto.RegisterType((*TrainArriveStationEvent)(nil), "metro.TrainArriveStationEvent")
	proto.RegisterType((*RegisterPassengerMsg)(nil), "metro.RegisterPassengerMsg")
	proto.RegisterType((*TrainArriveStationEventMsg)(nil), "metro.TrainArriveStationEventMsg")
}

func init() { proto.RegisterFile("x/metro/codec.proto", fileDescriptor_966ccfa1a9e1c00b) }

var fileDescriptor_966ccfa1a9e1c00b = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0xc1, 0x6a, 0x13, 0x5f,
	0x14, 0xc6, 0x7b, 0xa7, 0x4d, 0x93, 0x39, 0x49, 0xff, 0x7f, 0xb8, 0x16, 0x1c, 0x82, 0x4c, 0xc6,
	0xa8, 0x10, 0x11, 0x33, 0xa0, 0x7b, 0x21, 0xc1, 0x22, 0x28, 0xc5, 0x32, 0x56, 0x5c, 0x0e, 0xb7,
	0x33, 0xa7, 0xe3, 0x25, 0x99, 0xb9, 0xe1, 0xce, 0x31, 0xa6, 0x6f, 0xe0, 0xd2, 0x85, 0xaf, 0xe0,
	0xbb, 0xb8, 0xec, 0xd2, 0x85, 0x04, 0x49, 0x5f, 0x42, 0xba, 0x92, 0xb9, 0x33, 0x49, 0x83, 0x50,
	0x21, 0xd0, 0x85, 0xbb, 0x73, 0xbf, 0xfb, 0xdd, 0x73, 0x0e, 0xbf, 0xf9, 0x18, 0xb8, 0x35, 0xf3,
	0x53, 0x24, 0xad, 0xfc, 0x48, 0xc5, 0x18, 0xf5, 0x27, 0x5a, 0x91, 0xe2, 0x35, 0x23, 0xb5, 0x9b,
	0x6b, 0x5a, 0x7b, 0x3f, 0x51, 0x89, 0x32, 0xa5, 0x5f, 0x54, 0xa5, 0xda, 0xfd, 0x61, 0x41, 0xfd,
	0x0d, 0x09, 0x92, 0x2a, 0xe3, 0x8f, 0xa0, 0x91, 0x22, 0x89, 0x58, 0x90, 0x70, 0x98, 0xc7, 0x7a,
	0xcd, 0x27, 0xff, 0xf7, 0x3f, 0xa2, 0x98, 0x62, 0xff, 0xb0, 0x92, 0x83, 0x95, 0x81, 0xbb, 0x60,
	0x4d, 0x46, 0x8e, 0xe5, 0xb1, 0x5e, 0x6b, 0xf8, 0xdf, 0x62, 0xde, 0x81, 0x23, 0x2d, 0x53, 0xa1,
	0xcf, 0x5e, 0xe1, 0x59, 0x60, 0x4d, 0x46, 0xdc, 0x81, 0x7a, 0x5e, 0xf6, 0x75, 0xb6, 0x3d, 0xd6,
	0xb3, 0x83, 0xe5, 0x91, 0xdf, 0x01, 0x1b, 0xf3, 0x48, 0x8c, 0x05, 0x29, 0xed, 0xec, 0x78, 0xac,
	0xb7, 0x1d, 0x5c, 0x09, 0xbc, 0x0d, 0x0d, 0x1c, 0xe3, 0xd4, 0x5c, 0xd6, 0xcc, 0xe5, 0xea, 0xcc,
	0x3d, 0x68, 0xc9, 0x3c, 0x9c, 0xa0, 0x56, 0x59, 0x28, 0x62, 0xe1, 0xec, 0x7a, 0xac, 0xd7, 0x08,
	0x40, 0xe6, 0x47, 0x85, 0x34, 0x88, 0x05, 0xbf, 0x07, 0x7b, 0x24, 0xa3, 0x11, 0x52, 0xa8, 0x4e,
	0x4f, 0x65, 0x84, 0x4e, 0xdd, 0xb4, 0x68, 0x95, 0xe2, 0x6b, 0xa3, 0xf1, 0x2e, 0xec, 0x91, 0x1a,
	0x8f, 0xc3, 0x44, 0x10, 0x86, 0x98, 0x91, 0xd3, 0x30, 0xa6, 0x66, 0x21, 0xbe, 0x10, 0x84, 0x07,
	0x19, 0x15, 0xa3, 0xd6, 0x3c, 0x33, 0xc7, 0x36, 0x16, 0x58, 0x59, 0x66, 0xc5, 0x28, 0xcc, 0x48,
	0x8b, 0x2c, 0x2a, 0x0c, 0x92, 0x1c, 0x28, 0x47, 0x2d, 0xc5, 0x83, 0x99, 0xa4, 0xee, 0x17, 0x06,
	0xb5, 0x63, 0x2d, 0xe4, 0x0d, 0xc3, 0x7d, 0x06, 0x75, 0x11, 0xc7, 0x1a, 0xf3, 0xdc, 0xc0, 0x6d,
	0x0d, 0xef, 0x5f, 0xce, 0x3b, 0x5e, 0x22, 0xe9, 0xfd, 0x87, 0x93, 0x7e, 0xa4, 0x52, 0x5f, 0xaa,
	0xe9, 0x63, 0x95, 0xa1, 0x5f, 0x4e, 0x18, 0x94, 0xde, 0x60, 0xf9, 0xa8, 0xfb, 0x8b, 0x81, 0x7d,
	0x24, 0xf2, 0x1c, 0xb3, 0x04, 0xf5, 0x3f, 0xb5, 0x1a, 0x7f, 0x09, 0x7b, 0x1a, 0x13, 0x99, 0x13,
	0x6a, 0x8c, 0x43, 0x41, 0x65, 0x42, 0x86, 0x0f, 0x2e, 0xe7, 0x9d, 0xbb, 0xd7, 0x76, 0x79, 0x9b,
	0xc9, 0xd9, 0xb1, 0x4c, 0x31, 0x68, 0x5d, 0xbd, 0x1d, 0x10, 0xe7, 0xb0, 0x93, 0x89, 0x14, 0x4d,
	0x8e, 0xec, 0xc0, 0xd4, 0xdd, 0x4f, 0x16, 0xdc, 0x36, 0x5f, 0x64, 0xa0, 0xb5, 0x9c, 0x62, 0x95,
	0xfd, 0x83, 0x29, 0x66, 0x74, 0xb3, 0x20, 0x7c, 0x68, 0x56, 0x89, 0x0f, 0x47, 0x78, 0x56, 0xc1,
	0x30, 0xc6, 0x6a, 0x66, 0x61, 0x84, 0x7c, 0x55, 0xf3, 0x87, 0x60, 0x53, 0xb1, 0x98, 0xb1, 0xef,
	0x18, 0x7b, 0x6b, 0x31, 0xef, 0x34, 0xcc, 0xb6, 0x85, 0xb9, 0x41, 0x55, 0xc5, 0x9f, 0x03, 0x08,
	0xb3, 0xbe, 0x21, 0x54, 0xdb, 0x84, 0x90, 0x5d, 0x3d, 0x1c, 0x50, 0xf7, 0x1d, 0xec, 0x07, 0x15,
	0xae, 0x55, 0x18, 0x0e, 0xf3, 0x64, 0x33, 0x0c, 0x4b, 0xc6, 0xd6, 0x1a, 0xe3, 0xaf, 0x0c, 0xda,
	0xd7, 0x30, 0xde, 0xb8, 0xff, 0x1f, 0x18, 0xad, 0xcd, 0x30, 0x6e, 0xff, 0x0d, 0xe3, 0xd0, 0xf9,
	0xb6, 0x70, 0xd9, 0xf9, 0xc2, 0x65, 0x3f, 0x17, 0x2e, 0xfb, 0x7c, 0xe1, 0x6e, 0x9d, 0x5f, 0xb8,
	0x5b, 0xdf, 0x2f, 0xdc, 0xad, 0x93, 0x5d, 0xf3, 0x77, 0x7c, 0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff,
	0x51, 0x32, 0x35, 0x5c, 0x5e, 0x05, 0x00, 0x00,
}

func (m *Station) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Station) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n1, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.PrimaryKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.PrimaryKey)))
		i += copy(dAtA[i:], m.PrimaryKey)
	}
	if len(m.Station) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Station)))
		i += copy(dAtA[i:], m.Station)
	}
	if m.Escalator != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Escalator))
	}
	if m.Elevator != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Elevator))
	}
	if m.IsPeronAda {
		dAtA[i] = 0x30
		i++
		if m.IsPeronAda {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.TicketOffice != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.TicketOffice))
	}
	if m.TollGateEnt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.TollGateEnt))
	}
	if m.TollGateEx != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.TollGateEx))
	}
	if m.EntranceExit != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.EntranceExit))
	}
	return i, nil
}

func (m *Train) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Train) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n2, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.PrimaryKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.PrimaryKey)))
		i += copy(dAtA[i:], m.PrimaryKey)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	return i, nil
}

func (m *Passenger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Passenger) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n3, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	if len(m.PrimaryKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.PrimaryKey)))
		i += copy(dAtA[i:], m.PrimaryKey)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if m.RegisteredAt != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.RegisteredAt))
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *TrainArriveStationEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrainArriveStationEvent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n4, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	if len(m.PrimaryKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.PrimaryKey)))
		i += copy(dAtA[i:], m.PrimaryKey)
	}
	if len(m.StationKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.StationKey)))
		i += copy(dAtA[i:], m.StationKey)
	}
	if len(m.TrainKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.TrainKey)))
		i += copy(dAtA[i:], m.TrainKey)
	}
	if m.ArrivedAt != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.ArrivedAt))
	}
	return i, nil
}

func (m *RegisterPassengerMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterPassengerMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n5, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n5
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	return i, nil
}

func (m *TrainArriveStationEventMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrainArriveStationEventMsg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCodec(dAtA, i, uint64(m.Metadata.Size()))
		n6, err := m.Metadata.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n6
	}
	if len(m.StationKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.StationKey)))
		i += copy(dAtA[i:], m.StationKey)
	}
	if len(m.TrainKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintCodec(dAtA, i, uint64(len(m.TrainKey)))
		i += copy(dAtA[i:], m.TrainKey)
	}
	return i, nil
}

func encodeVarintCodec(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Station) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.PrimaryKey)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Station)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.Escalator != 0 {
		n += 1 + sovCodec(uint64(m.Escalator))
	}
	if m.Elevator != 0 {
		n += 1 + sovCodec(uint64(m.Elevator))
	}
	if m.IsPeronAda {
		n += 2
	}
	if m.TicketOffice != 0 {
		n += 1 + sovCodec(uint64(m.TicketOffice))
	}
	if m.TollGateEnt != 0 {
		n += 1 + sovCodec(uint64(m.TollGateEnt))
	}
	if m.TollGateEx != 0 {
		n += 1 + sovCodec(uint64(m.TollGateEx))
	}
	if m.EntranceExit != 0 {
		n += 1 + sovCodec(uint64(m.EntranceExit))
	}
	return n
}

func (m *Train) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.PrimaryKey)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func (m *Passenger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.PrimaryKey)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.RegisteredAt != 0 {
		n += 1 + sovCodec(uint64(m.RegisteredAt))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func (m *TrainArriveStationEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.PrimaryKey)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.StationKey)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.TrainKey)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	if m.ArrivedAt != 0 {
		n += 1 + sovCodec(uint64(m.ArrivedAt))
	}
	return n
}

func (m *RegisterPassengerMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func (m *TrainArriveStationEventMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.StationKey)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	l = len(m.TrainKey)
	if l > 0 {
		n += 1 + l + sovCodec(uint64(l))
	}
	return n
}

func sovCodec(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCodec(x uint64) (n int) {
	return sovCodec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Station) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Station: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Station: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryKey = append(m.PrimaryKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PrimaryKey == nil {
				m.PrimaryKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Station", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Station = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Escalator", wireType)
			}
			m.Escalator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Escalator |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elevator", wireType)
			}
			m.Elevator = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Elevator |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPeronAda", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPeronAda = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TicketOffice", wireType)
			}
			m.TicketOffice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TicketOffice |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TollGateEnt", wireType)
			}
			m.TollGateEnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TollGateEnt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TollGateEx", wireType)
			}
			m.TollGateEx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TollGateEx |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntranceExit", wireType)
			}
			m.EntranceExit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntranceExit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Train) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Train: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Train: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryKey = append(m.PrimaryKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PrimaryKey == nil {
				m.PrimaryKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Passenger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Passenger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Passenger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryKey = append(m.PrimaryKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PrimaryKey == nil {
				m.PrimaryKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredAt", wireType)
			}
			m.RegisteredAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RegisteredAt |= github_com_iov_one_weave.UnixTime(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrainArriveStationEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrainArriveStationEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrainArriveStationEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryKey = append(m.PrimaryKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PrimaryKey == nil {
				m.PrimaryKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationKey = append(m.StationKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StationKey == nil {
				m.StationKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrainKey = append(m.TrainKey[:0], dAtA[iNdEx:postIndex]...)
			if m.TrainKey == nil {
				m.TrainKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArrivedAt", wireType)
			}
			m.ArrivedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArrivedAt |= github_com_iov_one_weave.UnixTime(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterPassengerMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterPassengerMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterPassengerMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrainArriveStationEventMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrainArriveStationEventMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrainArriveStationEventMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &weave.Metadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StationKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StationKey = append(m.StationKey[:0], dAtA[iNdEx:postIndex]...)
			if m.StationKey == nil {
				m.StationKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TrainKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCodec
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCodec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TrainKey = append(m.TrainKey[:0], dAtA[iNdEx:postIndex]...)
			if m.TrainKey == nil {
				m.TrainKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCodec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCodec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCodec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCodec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCodec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCodec
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCodec
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCodec
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCodec(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCodec
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCodec = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCodec   = fmt.Errorf("proto: integer overflow")
)
